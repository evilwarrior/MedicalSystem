#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Feb 27, 2019 03:47:48 PM CST  platform: Windows NT

import sys, json

try:
    import Tkinter as tk
    import tkMessageBox as box
except ImportError:
    import tkinter as tk
    from tkinter import messagebox as box
from datetime import datetime

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def set_Tk_var():
    global NAME, SEARCH_ENTRY, SEARCH_COMBO
    global EMRID, RECORDS, PLACE, OCCUPATION, ADMISSION, RECORD, SEX, MARITAL_ST, HISTORY, RECORDER, AGE, NATION, SOURCE, ADDRESS, SIGN_T3, SIGN_T4
    global ACCOUNT, PASSWD, IS_ADMIN
    NAME = tk.StringVar()
    SEARCH_ENTRY = tk.StringVar()
    SEARCH_COMBO = tk.StringVar()
    EMRID = tk.StringVar()
    RECORDS = tk.StringVar()
    PLACE = tk.StringVar()
    OCCUPATION = tk.StringVar()
    ADMISSION = tk.StringVar()
    RECORD = tk.StringVar()
    SEX = tk.StringVar()
    MARITAL_ST = tk.StringVar()
    HISTORY = tk.StringVar()
    RECORDER = tk.StringVar()
    AGE = tk.StringVar()
    NATION = tk.StringVar()
    SOURCE = tk.StringVar()
    ADDRESS = tk.StringVar()
    SIGN_T3 = tk.StringVar()
    SIGN_T4 = tk.StringVar()
    ACCOUNT = tk.StringVar()
    PASSWD = tk.StringVar()
    IS_ADMIN = tk.StringVar()

# Common codes with new() and modify()
def up_db(op):
# op is equal to 'add' or 'mod'
    global isAdmin
    if isAdmin:
        account = ACCOUNT.get()
        name = NAME.get()
        passwd = PASSWD.get()
        is_admin = IS_ADMIN.get()
        record = (account, name, passwd, is_admin)
    else:
        emr_id = EMRID.get()
        name = NAME.get()
        sex = SEX.get()
        age = AGE.get()
        admission = ADMISSION.get()
        record = (emr_id, name, sex, age, admission)
    flag = True
    for field in record:
        if field == '':
            flag = False
            break
    if flag:
        if isAdmin:
            if len(account) < 5 or len(account) > 20:
                warn = '帐号长度需要在5到20之间'
            elif len(name) > 20:
                warn = '姓名长度需要在20之内'
            elif len(passwd) < 8 or len(passwd) > 30:
                warn = '口令长度需要在8到30之间'
            elif is_admin != '是' and is_admin != '否':
                warn = '管理员权限仅允许输入是或否'
            else:
                warn = ()
        else:
            warn = fields_filter()
        if isinstance(warn, tuple):
            if isAdmin:
                if is_admin == '是':
                    is_admin = 'y'
                else:
                    is_admin = 'n'
                record = (account, name, passwd, is_admin)
                record = json.dumps({'req': '%s_user' %op, 'record': record})
            else:
                record = warn
                record = json.dumps({'req': '%s_emr' %op, 'record': record}).encode('utf-8')
                record_len = len(record)
                notify = json.dumps({'req': 'notify', 'len': record_len})
                sock.send(notify)
                recv = json.loads(sock.recv(1024).decode('utf-8'))
                if 'stat' not in recv or 'time' not in recv:
                    warn = '传输电子病历失败'
                elif recv['stat'] != 'Prepared' or not isinstance(recv['time'], int):
                    warn = '传输电子病历失败'
            import traceback
            try:
                if not isinstance(warn, tuple):
                    raise TimeoutError
                if isAdmin:
                    sock.send(record)
                else:
                    buf = 1024
                    time = recv['time']
                    for i in range(0, time):
                        if i+1 == time:
                            sock.send(record[i*buf:])
                        else:
                            sock.send(record[i*buf: (i+1)*buf])
                recv = json.loads(sock.recv(1024).decode('utf-8'))
                lb = w.RecordsListbox
                if recv['stat'] == 'Success':
                    global sel
                    if isAdmin:
                        row = '{:^20}{:^20}'.format(account, name)
                    else:
                        record_date = recv['date']
                        row =\
'{:^14}{:^20}{:^4}{:^3}{:^12}{:^10}'.format(emr_id, name, sex, age, admission, record_date)
                    if op == 'add':
                        lb.insert(tk.END, row)
                        if isAdmin:
                            info = '用户添加成功！'
                            records.append([account, name, is_admin])
                        else:
                            info = '电子病历添加成功！'
                            records.append([emr_id, name, sex, age, admission, record_date])
                        sel = len(records)
                        specify()
                    else:
                        lb.delete(sel,)
                        lb.insert(sel, row)
                        if isAdmin:
                            info = '用户修改成功！'
                            records[sel-1] = list(record)
                        else:
                            info = '电子病历修改成功！'
                            records[sel-1] = [emr_id, name, sex, age, admission, record_date]
                    box.showinfo(title=info, message=info, parent=root)
                    return
                elif recv['stat'] == 'Failed':
                    warn = recv['error']
                else:
                    raise Exception
            except (ConnectionRefusedError, TimeoutError):
                warn = '传输电子病历失败'
            except:
                traceback.print_exc()
                error = '意外错误！'
                box.showerror(title=error, message=error, parent=root)
                return
    else:
        if isAdmin:
            warn = '请输入用户的全部信息！'
        else:
            warn = '请输入病历的关键信息！'
            tail = '\n这些信息为：病历号、姓名、性别、年龄、入院时间'
            box.showwarning(title=warn, message=warn+tail, parent=root)
            return
    box.showwarning(title=warn, message=warn, parent=root)

# Functions for up_db()
def get_txt(txt):
    return txt.get(1.0, tk.END).strip()
def put_txt(txt, value):
    txt.delete(1.0, tk.END)
    txt.insert(tk.END, value)
def is_date(date):
    try:
        datetime.strptime(date, '%Y/%m/%d')
        return True
    except:
        return False

# Legality for EMR fields used in up_db()
def fields_filter():
    emr_id = EMRID.get()
    if len(emr_id) != 12:
        return '病历号必须由12个字符组成'

    name = NAME.get()
    if len(name) > 20:
        return '姓名长度需要在20之内'
    sex = SEX.get()
    if sex != '男' and sex != '女' and sex != '不明':
        return '性别仅允许输入男、女或不明'
    age = AGE.get()
    if not age.isdigit():
        return '年龄仅允许输入数字'
    if int(age) < 0 or int(age) > 120:
        return '年龄需要在0到120之间'
    place = PLACE.get()
    if len(place) > 20:
        return '籍贯长度需要在20之内'
    marital_st = MARITAL_ST.get()
    if marital_st != '' and marital_st != '未婚' and marital_st != '已婚' and marital_st != '丧偶' and marital_st != '离婚':
        return '婚姻仅允许输入未婚、已婚、丧偶或离婚'
    nation = NATION.get()
    if len(nation) > 10:
        return '民族长度需要在10之内'
    occupation = OCCUPATION.get()
    if len(occupation) > 10:
        return '民族长度需要在10之内'
    address = PLACE.get()
    if len(address) > 50:
        return '住址长度需要在50之内'
    admission = ADMISSION.get()
    if not is_date(admission):
        return '入院日期需要符合日期格式：yyyy/MM/dd'
    history = HISTORY.get()
    if history != '' and not is_date(history):
        return '病史采集日期需要符合日期格式：yyyy/MM/dd'
    source = SOURCE.get()
    if len(source) > 20:
        return '病史陈述者长度需要在20之内'

    cc = get_txt(w.CCText)
    if len(cc) > 500:
        return '主诉长度需要在500之内'

    hpi = get_txt(w.HPIText)
    if len(hpi) > 1000:
        return '现病史长度需要在1000之内'
    pmh = get_txt(w.PMHText)
    if len(pmh) > 1000:
        return '既往史长度需要在1000之内'
    ph = get_txt(w.PHText)
    if len(ph) > 1000:
        return '个人史长度需要在1000之内'
    ogh = get_txt(w.OGHText)
    if len(ogh) > 1000:
        return '月经婚育史长度需要在1000之内'
    fh = get_txt(w.FHText)
    if len(fh) > 1000:
        return '家族史长度需要在1000之内'
    
    exam = get_txt(w.DscrText_t2)
    if len(exam) > 9999:
        return '体格检查中的描述长度需要在9999之内'

    dx_dscr = get_txt(w.DscrText_t3)
    if len(dx_dscr) > 9999:
        return '诊断中的描述长度需要在9999之内'
    dx_sign = SIGN_T3.get()
    if len(dx_sign) > 20:
        return '诊断中的医师签名长度需要在20之内'

    advice_dscr = get_txt(w.DscrText_t4)
    if len(advice_dscr) > 9999:
        return '医嘱中的描述长度需要在9999之内'
    advice_sign = SIGN_T4.get()
    if len(advice_sign) > 20:
        return '医嘱中的医师签名长度需要在20之内'
    
    stat = (name, sex, age, place, marital_st, nation, occupation, address, admission, history, source)
    anamnesis = (hpi, pmh, ph, ogh, fh)
    dx = (dx_dscr, dx_sign)
    advice = (advice_dscr, advice_sign)
    record = (emr_id, stat, cc, anamnesis, exam, dx, advice)
    return record


# Button clicks event
def new(event=None):
    up_db('add')


def modify(event=None):
    up_db('mod')


def specify(event=None):
    global sel
    if event is not None:
        sel = w.RecordsListbox.curselection()[0]
    if sel == 0:
    # Select for creating an empty form.
        w.ModButton.place_forget()
        w.DelButton.place_forget()
        # Upper for administrator
        # Lower for medic
        NAME.set('')
        if isAdmin:
            w.NewButton.place(relx=0.65, rely=0.847, height=24, width=116)
            w.AccountEntry.config(state="normal")
            w.NameEntry.bind("<Key-Return>", new)
            w.AccountEntry.bind("<Key-Return>", new)
            w.PasswdEntry.bind("<Key-Return>", new)
            w.IsAdminEntry.bind("<Key-Return>", new)
            ACCOUNT.set('')
            PASSWD.set('')
            IS_ADMIN.set('')
        else:
            w.NewButton.place(relx=0.592, rely=0.928, height=24, width=116)
            w.EMRIdEntry.config(state="normal")
            EMRID.set('')
            PLACE.set('')
            OCCUPATION.set('')
            ADMISSION.set('')
            RECORD.set('')
            SEX.set('')
            MARITAL_ST.set('')
            HISTORY.set('')
            AGE.set('')
            NATION.set('')
            SOURCE.set('')
            ADDRESS.set('')
            SIGN_T3.set('')
            SIGN_T4.set('')
            put_txt(w.CCText, '')
            put_txt(w.HPIText, '')
            put_txt(w.PMHText, '')
            put_txt(w.PHText, '')
            put_txt(w.OGHText, '')
            put_txt(w.FHText, '')
            put_txt(w.DscrText_t2, '')
            put_txt(w.DscrText_t3, '')
            put_txt(w.DscrText_t4, '')
    else:
    # Select for modifying or deleting an existed form.
        w.NewButton.place_forget()
        # Upper for administrator
        # Lower for medic
        if isAdmin:
            w.AccountEntry.unbind("<Key-Return>")
            w.NameEntry.bind("<Key-Return>", modify)
            w.PasswdEntry.bind("<Key-Return>", modify)
            w.IsAdminEntry.bind("<Key-Return>", modify)
            global self
            record = records[sel-1]
            if record[0] == self:
                w.ModButton.place(relx=0.65, rely=0.847, height=24, width=116)
                w.DelButton.place_forget()
            else:
                w.ModButton.place(relx=0.515, rely=0.847, height=24, width=116)
                w.DelButton.place(relx=0.772, rely=0.847, height=24, width=116)
            ACCOUNT.set(record[0])
            PASSWD.set('')
            NAME.set(record[1])
            if record[2] == 'y':
                IS_ADMIN.set('是')
            else:
                IS_ADMIN.set('否')
            w.AccountEntry.config(state="disabled")
        else:
            w.ModButton.place(relx=0.491, rely=0.928, height=24, width=116)
            w.DelButton.place(relx=0.678, rely=0.928, height=24, width=116)
            w.EMRIdEntry.config(state="disabled")
            emr_id = records[sel-1][0]
            EMRID.set(emr_id)
            record = detail(emr_id)
            if isinstance(record, str):
                warn = record
                box.showwarning(title=warn, message=warn, parent=root)
            else:
                stat = record[0]
                NAME.set(stat[0])
                SEX.set(stat[1])
                AGE.set(stat[2])
                PLACE.set(stat[3])
                MARITAL_ST.set(stat[4])
                NATION.set(stat[5])
                OCCUPATION.set(stat[6])
                ADDRESS.set(stat[7])
                ADMISSION.set(stat[8])
                HISTORY.set(stat[9])
                SOURCE.set(stat[10])
                RECORD.set(stat[11])
                put_txt(w.CCText, record[1])
                anamnesis = record[2]
                put_txt(w.HPIText, anamnesis[0])
                put_txt(w.PMHText, anamnesis[1])
                put_txt(w.PHText, anamnesis[2])
                put_txt(w.OGHText, anamnesis[3])
                put_txt(w.FHText, anamnesis[4])
                put_txt(w.DscrText_t2, record[3])
                dx = record[4]
                put_txt(w.DscrText_t3, dx[0])
                SIGN_T3.set(dx[1])
                advice = record[5]
                put_txt(w.DscrText_t4, advice[0])
                SIGN_T4.set(advice[1])

# Taken all fields of the specified EMR
def detail(emr_id):
    query = json.dumps({'req': 'detail', 'emr_id': emr_id})
    sock.send(query)
    recv = json.loads(sock.recv(1024).decode('utf-8'))
    if 'stat' not in recv or 'time' not in recv:
        return '查看电子病历失败'
    elif recv['stat'] != 'Accepted' or not isinstance(recv['time'], int):
        return '查看电子病历失败'
    import traceback
    try:
        recvd = b''
        time = recv['time']
        for i in range(0, time):
            recv = sock.recv(1024)
            recvd += recv
        return json.loads(recvd.decode('utf-8'))
    except:
        traceback.print_exc()
        return '查看电子病历失败'


def delete(event=None):
    if isAdmin:
        aid = ACCOUNT.get()
        query = json.dumps({'req': 'del_user', 'id': aid})
    else:
        emr_id = EMRID.get()
        query = json.dumps({'req': 'del_emr', 'id': emr_id})
    sock.send(query)
    recv = json.loads(sock.recv(1024).decode('utf-8'))
    try:
        if recv['stat'] == 'Success':
            global sel
            w.RecordsListbox.delete(sel,)
            if isAdmin:
                info = '用户删除成功！'
            else:
                info = '电子病历删除成功！'
            del records[sel-1]
            box.showinfo(title=info, message=info, parent=root)
            sel = 0
            specify()
        elif recv['stat'] == 'Failed':
            warn = '电子病历删除失败！'
            box.showwarning(title=warn, message=warn, parent=root)
        else:
            raise Exception
    except:
        error = '意外错误！'
        box.showerror(title=error, message=error, parent=root)


def search(event=None):
    keywd = SEARCH_ENTRY.get().strip()
    type = SEARCH_COMBO.get().strip()
    # empty string means searching all records
    query = json.dumps({'req': 'search', 'type': type, 'keywd': keywd})

    sock.send(query)
    import traceback
    try:
        recv = json.loads(sock.recv(1024).decode('utf-8'))
        if 'stat' in recv:
            if recv['stat'] == 'Notify':
                recvd = b''
                time = recv['time']
                for i in range(0, time):
                    recv = sock.recv(1024)
                    recvd += recv
                recv = json.loads(recvd.decode('utf-8'))
            else:
                raise Exception
        else:
            if not recv['records']:
                if isAdmin:
                    info = '没有查询到用户！'
                else:
                    info = '没有查询到电子病历！'
                box.showinfo(title=info, message=info, parent=root)
                return
            global records
            records = recv['records']
            if isAdmin:
                rows = ['{:^20}{:^20}- 双击新建用户'.format('帐号', '用户')]
                for record in records:
                    rows.append('{:^20}{:^20}'.format(record[0], record[1]))
            else:
                rows = ['{:^14}{:^20}{:^4}{:^3}{:^12}{:^10}- 双击新建电子病历'.format('病历号', '姓名',
                    '性别', '年龄', '入院日期', '记录日期')]
                for record in records:
                    rows.append('{:^14}{:^20}{:^4}{:^3}{:^12}{:^10}'.format(record[0], record[1],
                        record[2], record[3], record[4], record[5]))

            global sel
            sel = 0
            specify()
            RECORDS.set(rows)
    except:
        traceback.print_exc()
        error = '意外错误！'
        box.showerror(title=error, message=error, parent=root)



def init(top, gui, *args, **kwargs):
    global w, top_level, root, sock, records, isAdmin
    w = gui
    top_level = top
    root = top
    rows = ['测试行']
    if 'param' in kwargs:
        isAdmin = kwargs['isAdmin']
        param = kwargs['param']
        sock = param['sock']
        records = param['records']
        if isAdmin:
            global self
            self = param['self']
            rows = ['{:^20}{:^20}- 双击新建用户'.format('帐号', '用户')]
            for record in records:
                rows.append('{:^20}{:^20}'.format(record[0], record[1]))
        else:
            RECORDER.set(param['name'])
            rows = ['{:^14}{:^20}{:^4}{:^3}{:^12}{:^10}- 双击新建电子病历'.format('病历号', '姓名',
                '性别', '年龄', '入院日期', '记录日期')]
            for record in records:
                rows.append('{:^14}{:^20}{:^4}{:^3}{:^12}{:^10}'.format(record[0], record[1],
                    record[2], record[3], record[4], record[5]))
        top.protocol('WM_DELETE_WINDOW', destroy_window)
    else:
        # records = [['admin', '默认管理员'], ['testUser', '测试用户']]
        isAdmin = False
        records = [['123456789123', '测试1', '男', '18', '2000/01/01', '2000/01/02'], ['987654321987', '测试2', '男', '18', '2000/01/01', '2000/01/02']]
        for record in records:
            rows.append('{:^14}{:^20}{:^4}{:^3}{:^12}{:^10}'.format(record[0], record[1],
                record[2], record[3], record[4], record[5]))
    RECORDS.set(rows)

def destroy_window():
    # Function which closes the window.
    sock.shutdown()
    sock.close()
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import Main_GUI
    Main_GUI.vp_start_gui()




