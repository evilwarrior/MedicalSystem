#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Feb 23, 2019 10:30:42 PM CST  platform: Windows NT

import sys, os, socket, json
from OpenSSL import SSL, crypto

try:
    import Tkinter as tk
    import tkMessageBox as box
    import ConfigParser as configparser
except ImportError:
    import tkinter as tk
    from tkinter import messagebox as box
    import configparser

import Main_GUI

def set_Tk_var():
    global account
    account = tk.StringVar()
    global passwd
    passwd = tk.StringVar()


def login(event=None):
    dir = os.curdir

    config = configparser.ConfigParser()
    if os.path.exists(os.path.join(dir, 'config.ini')):
        config.read(os.path.join(dir, 'config.ini'))
    else:
        default_ctx = '[DEFAULT]\nHOST = localhost\nPORT = 80\nCA_FILE = ca.cer\n\n[CERTIFICATE]'
        with open(os.path.join(dir, 'config.ini'), 'w') as ini:
            ini.write(default_ctx)
    if 'HOST' in config['DEFAULT']:
        HOST = config['DEFAULT']['HOST']
    else:
        HOST = 'localhost'
    if 'PORT' in config['DEFAULT']:
        PORT = int(config['DEFAULT']['PORT'])
    else:
        PORT = 80
    if 'CA_FILE' in config['DEFAULT']:
        CA_FILE = config['DEFAULT']['CA_FILE']
    else:
        CA_FILE = 'ca.cer'


    def verify_cb(conn, cert, errnum, depth, ok):
        certsubject = crypto.X509Name(cert.get_subject())
        CN = cert.get_issuer().commonName
        if 'CA_COMMON_NAME' in config['CERTIFICATE']:
            CA_COMMON_NAME = config['CERTIFICATE']['CA_COMMON_NAME']
            if not CA_COMMON_NAME:
                CA_COMMON_NAME = None
        else:
            warn = '请在初始化文件config.ini中加入字段CA_COMMON_NAME以验证证书！'
            box.showwarning(title='初始化错误', message=warn, parent=root)
            return False
        if depth == 1:
            if CN != CA_COMMON_NAME:
                return False
        elif depth == 0:
            if 'CERTIFICATE' not in config:
                warn = '请在初始化文件config.ini中加入字段[CERTIFICATE]！'
                box.showwarning(title='初始化错误', message=warn, parent=root)
                return
            if 'SERIAL_NUMBER' in config['CERTIFICATE']:
                SERIAL_NUMBER = config['CERTIFICATE']['SERIAL_NUMBER']
                try:
                    SERIAL_NUMBER = int(SERIAL_NUMBER, 16)
                except:
                    warn = '请以16进制的形式输入SERIAL_NUMBER！'
                    box.showwarning(title='初始化错误', message=warn, parent=root)
                    return False
            else:
                warn = '请在初始化文件config.ini中加入字段SERIAL_NUMBER以验证证书序列号！'
                box.showwarning(title='初始化错误', message=warn, parent=root)
                return False
            if 'COMMON_NAME' in config['CERTIFICATE']:
                COMMON_NAME = config['CERTIFICATE']['COMMON_NAME']
                if not COMMON_NAME:
                    COMMON_NAME = None
            else:
                warn = '请在初始化文件config.ini中加入字段COMMON_NAME以验证证书！'
                box.showwarning(title='初始化错误', message=warn, parent=root)
                return False
            if 'ORGANIZATIONAL_UNIT_NAME' in config['CERTIFICATE']:
                ORGANIZATIONAL_UNIT_NAME = config['CERTIFICATE']['ORGANIZATIONAL_UNIT_NAME']
                if not ORGANIZATIONAL_UNIT_NAME:
                    ORGANIZATIONAL_UNIT_NAME = None
            else:
                warn = '请在初始化文件config.ini中加入字段ORGANIZATIONAL_UNIT_NAME以验证证书！'
                box.showwarning(title='初始化错误', message=warn, parent=root)
                return False
            if 'ORGANIZATION_NAME' in config['CERTIFICATE']:
                ORGANIZATION_NAME = config['CERTIFICATE']['ORGANIZATION_NAME']
                if not ORGANIZATION_NAME:
                    ORGANIZATION_NAME = None
            else:
                warn = '请在初始化文件config.ini中加入字段ORGANIZATION_NAME以验证证书！'
                box.showwarning(title='初始化错误', message=warn, parent=root)
                return False
            if 'STATE_OR_PROVINCE_NAME' in config['CERTIFICATE']:
                STATE_OR_PROVINCE_NAME = config['CERTIFICATE']['STATE_OR_PROVINCE_NAME']
                if not STATE_OR_PROVINCE_NAME:
                    STATE_OR_PROVINCE_NAME = None
            else:
                warn = '请在初始化文件config.ini中加入字段STATE_OR_PROVINCE_NAME以验证证书！'
                box.showwarning(title='初始化错误', message=warn, parent=root)
                return False
            if 'COUNTRY_NAME' in config['CERTIFICATE']:
                COUNTRY_NAME = config['CERTIFICATE']['COUNTRY_NAME']
                if not COUNTRY_NAME:
                    COUNTRY_NAME = None
            else:
                warn = '请在初始化文件config.ini中加入字段COUNTRY_NAME以验证证书！'
                box.showwarning(title='初始化错误', message=warn, parent=root)
                return False
            if 'LOCALITY_NAME' in config['CERTIFICATE']:
                LOCALITY_NAME = config['CERTIFICATE']['LOCALITY_NAME']
                if not LOCALITY_NAME:
                    LOCALITY_NAME = None
            else:
                warn = '请在初始化文件config.ini中加入字段LOCALITY_NAME以验证证书！'
                box.showwarning(title='初始化错误', message=warn, parent=root)
                return False
            if 'EMAIL_ADDRESS' in config['CERTIFICATE']:
                EMAIL_ADDRESS = config['CERTIFICATE']['EMAIL_ADDRESS']
                if not EMAIL_ADDRESS:
                    EMAIL_ADDRESS = None
            else:
                warn = '请在初始化文件config.ini中加入字段EMAIL_ADDRESS以验证证书！'
                box.showwarning(title='初始化错误', message=warn, parent=root)
                return False

            CN = certsubject.commonName
            OU = certsubject.organizationalUnitName
            O = certsubject.organizationName
            S = certsubject.stateOrProvinceName
            C = certsubject.countryName
            L = certsubject.localityName
            EMail = certsubject.emailAddress

            if CN != COMMON_NAME or OU != ORGANIZATIONAL_UNIT_NAME or\
                O != ORGANIZATION_NAME or S != STATE_OR_PROVINCE_NAME or\
                C != COUNTRY_NAME or L != LOCALITY_NAME or EMail != EMAIL_ADDRESS:
                return False
            if cert.get_serial_number() != SERIAL_NUMBER:
                return False
            if cert.has_expired():
                return False
        return ok


    # Detect account and passwd entries
    aid = account.get()
    pwd = passwd.get()
    if aid == '' or pwd == '':
        warn = '请输入帐号和口令'
        box.showwarning(title=warn, message=warn, parent=root)
        return

    # Initialize context
    error = '意外错误！'
    try:
        ctx = SSL.Context(SSL.TLSv1_2_METHOD)
        ctx.set_options(SSL.OP_SINGLE_ECDH_USE)
        ctx.set_cipher_list('ECDHE+ECDSA+AESGCM:ECDHE+aRSA+AESGCM:\
            !aNULL:!eNULL:!LOW:!MD5:!3DES:!PSK:!DSS:!RC4:!SHA1:!SHA')
        ctx.set_verify(SSL.VERIFY_PEER, verify_cb)  # Demand a certificate
        if os.path.isabs(CA_FILE):
            ctx.load_verify_locations(CA_FILE)
        else:
            ctx.load_verify_locations(os.path.join(dir, CA_FILE))
    except SSL.Error as errors:
        if str(errors).find('No such file or directory') != -1:
            warn = '找不到证书'
            box.showwarning(title=warn, message=warn, parent=root)
        else:
            box.showerror(title=error, message=error, parent=root)
        return
    except:
        box.showerror(title=error, message=error, parent=root)
        return

    # Set up client
    import traceback
    try:
        sock = SSL.Connection(ctx, socket.socket(socket.AF_INET, socket.SOCK_STREAM))
        sock.setsockopt(socket.SOL_TCP, socket.TCP_NODELAY, 1)
        sock.connect((HOST, PORT))
    except (ConnectionRefusedError, TimeoutError):
        warn = '连接服务器失败'
        box.showwarning(title=warn, message=warn, parent=root)
    except:
        traceback.print_exc()
        box.showerror(title=error, message=error, parent=root)
    else:
        account_passwd = {'req': 'login', 'account': aid, 'passwd': pwd}
        account_passwd_json = json.dumps(account_passwd)
        try:
            sock.send(account_passwd_json)
            from base64 import b64encode
            print('协议版本：', sock.get_cipher_version())
            print('主密钥：', b64encode(sock.master_key()).decode('utf-8'))
            print('生成密钥位数：', sock.get_cipher_bits())
            print('密钥套件：', sock.get_cipher_name())
            recv = json.loads(sock.recv(1024).decode('utf-8'))
            if recv['stat'] == 'Notify':
                recvd = b''
                time = recv['time']
                for i in range(0, time):
                    recv = sock.recv(1024)
                    recvd += recv
                recv = json.loads(recvd.decode('utf-8'))
            if recv['stat'] == 'IdPwdErr':
                warn = '帐号或口令错误'
                box.showwarning(title=warn, message=warn, parent=root)
                sock.shutdown()
            elif recv['stat'] == 'PassAdmin':
                destroy_window()
                Main_GUI.vp_start_gui(isAdmin=True, param={'sock': sock, 'records': recv['records'], 'self': aid})
            elif recv['stat'] == 'PassMed':
                destroy_window()
                Main_GUI.vp_start_gui(isAdmin=False, param={'sock': sock, 'records': recv['records'], 'name': recv['name']})
            else:
                raise Exception
        except SSL.Error as errors:
            traceback.print_exc()
            if str(errors).find('certificate verify failed') != -1:
                warn = '请求证书无效'
                box.showwarning(title=warn, message=warn, parent=root)
            else:
                box.showerror(title=error, message=error, parent=root)
            sock.close()
        except:
            traceback.print_exc()
            box.showerror(title=error, message=error, parent=root)
            sock.close()



def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import Login_GUI
    Login_GUI.vp_start_gui()




