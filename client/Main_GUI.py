#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Feb 27, 2019 03:47:34 PM CST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Main_GUI_support
from icon import icon

def vp_start_gui(*args, **kwargs):
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    Main_GUI_support.set_Tk_var()
    if 'isAdmin' in kwargs:
        top = MainGUI (root, kwargs['isAdmin'])
    else:
        top = MainGUI (root)
    Main_GUI_support.init(root, top, **kwargs)
    root.mainloop()

w = None
def create_MainGUI(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    Main_GUI_support.set_Tk_var()
    top = MainGUI (w)
    Main_GUI_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_MainGUI():
    global w
    w.destroy()
    w = None

class MainGUI:
    def __init__(self, top=None, is_admin=False):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#fffffb'  # 'white'
        _fgcolor = '#130c0e'  # 'black'
        _compcolor = '#d3c6a6' # 'sandy' 
        _ana2color = '#d3d7d4' # 'milkiness' 
        font9 = "-family 微软雅黑 -size 11 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font=font9)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        sw = top.winfo_screenwidth()
        sh = top.winfo_screenheight()
        if is_admin:
            w = abs(sw - 738)//2
            h = abs(sh - 660)//2
            top.geometry("738x660+%s+%s" %(w, h))
            top.title("用户管理 - 主界面 - 医院数据安全系统")
        else:
            w = abs(sw - 1284)//2
            h = abs(sh - 690)//2
            top.geometry("1284x690+%s+%s" %(w, h))
            top.title("电子病历管理 - 主界面 - 医院数据安全系统")
        top.focus_force()
        with open('icon.ico', 'wb') as ico:
            import base64, os
            ico.write(base64.b64decode(icon))
        top.iconbitmap(bitmap="icon.ico")
        os.remove('icon.ico')
        top.configure(background="#fffffb")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.NewButton = tk.Button(top)
        if is_admin:
            self.NewButton.place(relx=0.65, rely=0.847, height=24, width=116)
            self.NewButton.configure(text='''新建用户''')
        else:
            self.NewButton.place(relx=0.592, rely=0.928, height=24, width=116)
            self.NewButton.configure(text='''新建电子病历''')
        self.NewButton.configure(activebackground="#d3d7d4")
        self.NewButton.configure(activeforeground="#130c0e")
        self.NewButton.configure(background="#f6f5ec")
        self.NewButton.configure(command=Main_GUI_support.new)
        self.NewButton.configure(cursor="hand2")
        self.NewButton.configure(font=font9)
        self.NewButton.configure(foreground="#130c0e")
        self.NewButton.configure(pady="0")
        self.NewButton.bind("<Key-Return>", Main_GUI_support.new)

        self.ModButton = tk.Button(top)
        if is_admin:
            self.ModButton.configure(text='''修改用户''')
        else:
            self.ModButton.configure(text='''修改电子病历''')
        self.ModButton.configure(activebackground="#d3d7d4")
        self.ModButton.configure(activeforeground="#130c0e")
        self.ModButton.configure(background="#f6f5ec")
        self.ModButton.configure(command=Main_GUI_support.modify)
        self.ModButton.configure(cursor="hand2")
        self.ModButton.configure(font=font9)
        self.ModButton.configure(foreground="#130c0e")
        self.ModButton.configure(pady="0")
        self.ModButton.bind("<Key-Return>", Main_GUI_support.modify)

        self.DelButton = tk.Button(top)
        if is_admin:
            self.DelButton.configure(text='''删除用户''')
        else:
            self.DelButton.configure(text='''删除电子病历''')
        self.DelButton.configure(activebackground="#d3d7d4")
        self.DelButton.configure(activeforeground="#130c0e")
        self.DelButton.configure(background="#f6f5ec")
        self.DelButton.configure(command=Main_GUI_support.delete)
        self.DelButton.configure(cursor="hand2")
        self.DelButton.configure(font=font9)
        self.DelButton.configure(foreground="#130c0e")
        self.DelButton.configure(pady="0")
        self.DelButton.bind("<Key-Return>", Main_GUI_support.delete)

        self.SearchEntry = tk.Entry(top)
        if is_admin:
            self.SearchEntry.place(relx=0.217, rely=0.028, height=24, relwidth=0.425)
        else:
            self.SearchEntry.place(relx=0.125, rely=0.029, height=24, relwidth=0.245)

        self.SearchEntry.configure(background="#fffffb")
        self.SearchEntry.configure(font=font9)
        self.SearchEntry.configure(foreground="#130c0e")
        self.SearchEntry.configure(insertbackground="#130c0e")
        self.SearchEntry.configure(selectbackground="#d3d7d4")
        self.SearchEntry.configure(selectforeground="#130c0e")
        self.SearchEntry.configure(textvariable=Main_GUI_support.SEARCH_ENTRY)
        self.SearchEntry.bind("<Key-Return>", Main_GUI_support.search)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.SearchButton = tk.Button(top)
        if is_admin:
            self.SearchButton.place(relx=0.678, rely=0.028, height=24, width=116)
        else:
            self.SearchButton.place(relx=0.389, rely=0.029, height=24, width=116)
        self.SearchButton.configure(activebackground="#d3d7d4")
        self.SearchButton.configure(activeforeground="#130c0e")
        self.SearchButton.configure(background="#f6f5ec")
        self.SearchButton.configure(command=Main_GUI_support.search)
        self.SearchButton.configure(cursor="hand2")
        self.SearchButton.configure(font=font9)
        self.SearchButton.configure(foreground="#130c0e")
        self.SearchButton.configure(pady="0")
        self.SearchButton.configure(text='''查询记录''')
        self.SearchButton.bind("<Key-Return>", Main_GUI_support.search)


        self.style.map('TCombobox',fieldbackground=[("readonly", _bgcolor)])

        self.SearchCombobox = ttk.Combobox(top)
        if is_admin:
            self.SearchCombobox.place(relx=0.027, rely=0.028, relheight=0.034, relwidth=0.157)
            self.SearchCombobox.configure(values=('帐号', '姓名'))
        else:
            self.SearchCombobox.place(relx=0.016, rely=0.029, relheight=0.035, relwidth=0.09)
            self.SearchCombobox.configure(values=('病历号', '姓名', '入院日期', '记录日期'))
        self.SearchCombobox.configure(font=font9)
        self.SearchCombobox.configure(textvariable=Main_GUI_support.SEARCH_COMBO)
        self.SearchCombobox.configure(foreground="#130c0e")
        self.SearchCombobox.configure(background="#fffffb")
        self.SearchCombobox.configure(takefocus="")
        self.SearchCombobox.configure(state="readonly")
        self.SearchCombobox.current(0)

        self.RecordsListbox = ScrolledListBox(top)
        if is_admin:
            self.RecordsListbox.place(relx=0.027, rely=0.099, relheight=0.789, relwidth=0.434)
        else:
            self.RecordsListbox.place(relx=0.016, rely=0.101, relheight=0.809, relwidth=0.249)
        self.RecordsListbox.configure(background="#fffffb")
        self.RecordsListbox.configure(font=font9)
        self.RecordsListbox.configure(foreground="#130c0e")
        self.RecordsListbox.configure(selectbackground="#d3d7d4")
        self.RecordsListbox.configure(selectforeground="#130c0e")
        self.RecordsListbox.configure(width=10)
        self.RecordsListbox.configure(listvariable=Main_GUI_support.RECORDS)
        self.RecordsListbox.bind("<Double-Button-1>", Main_GUI_support.specify)

        if is_admin:
            self.AccountLabel = tk.Label(top)
            self.AccountLabel.place(relx=0.528, rely=0.255, height=24, width=76)
            self.AccountLabel.configure(background="#fffffb")
            self.AccountLabel.configure(font=font9)
            self.AccountLabel.configure(foreground="#130c0e")
            self.AccountLabel.configure(text='''帐号''')

            self.AccountEntry = tk.Entry(top)
            self.AccountEntry.place(relx=0.664, rely=0.255, height=24
                    , relwidth=0.249)
            self.AccountEntry.configure(background="#fffffb")
            self.AccountEntry.configure(disabledforeground="#d3d7d4")
            self.AccountEntry.configure(disabledbackground="#77787b")
            self.AccountEntry.configure(font=font9)
            self.AccountEntry.configure(foreground="#130c0e")
            self.AccountEntry.configure(insertbackground="#130c0e")
            self.AccountEntry.configure(selectbackground="#d3d7d4")
            self.AccountEntry.configure(selectforeground="#130c0e")
            self.AccountEntry.configure(textvariable=Main_GUI_support.ACCOUNT)
            self.AccountEntry.bind("<Key-Return>", Main_GUI_support.new)

            self.NameLabel = tk.Label(top)
            self.NameLabel.place(relx=0.528, rely=0.396, height=24, width=76)
            self.NameLabel.configure(background="#fffffb")
            self.NameLabel.configure(font=font9)
            self.NameLabel.configure(foreground="#130c0e")
            self.NameLabel.configure(text='''姓名''')

            self.NameEntry = tk.Entry(top)
            self.NameEntry.place(relx=0.664, rely=0.396,height=24, relwidth=0.249)
            self.NameEntry.configure(background="#fffffb")
            self.NameEntry.configure(font=font9)
            self.NameEntry.configure(foreground="#130c0e")
            self.NameEntry.configure(insertbackground="#130c0e")
            self.NameEntry.configure(selectbackground="#d3d7d4")
            self.NameEntry.configure(selectforeground="#130c0e")
            self.NameEntry.configure(textvariable=Main_GUI_support.NAME)
            self.NameEntry.bind("<Key-Return>", Main_GUI_support.new)

            self.PasswdLabel = tk.Label(top)
            self.PasswdLabel.place(relx=0.528, rely=0.537, height=24, width=76)
            self.PasswdLabel.configure(background="#fffffb")
            self.PasswdLabel.configure(font=font9)
            self.PasswdLabel.configure(foreground="#130c0e")
            self.PasswdLabel.configure(text='''口令''')
            self.PasswdLabel.configure(width=76)

            self.PasswdEntry = tk.Entry(top)
            self.PasswdEntry.place(relx=0.664, rely=0.537, height=24, relwidth=0.249)

            self.PasswdEntry.configure(background="#fffffb")
            self.PasswdEntry.configure(font=font9)
            self.PasswdEntry.configure(foreground="#130c0e")
            self.PasswdEntry.configure(insertbackground="#130c0e")
            self.PasswdEntry.configure(selectbackground="#d3d7d4")
            self.PasswdEntry.configure(selectforeground="#130c0e")
            self.PasswdEntry.configure(textvariable=Main_GUI_support.PASSWD)
            self.PasswdEntry.bind("<Key-Return>", Main_GUI_support.new)

            self.IsAdminLabel = tk.Label(top)
            self.IsAdminLabel.place(relx=0.528, rely=0.679, height=24, width=76)
            self.IsAdminLabel.configure(background="#fffffb")
            self.IsAdminLabel.configure(disabledforeground="#a3a3a3")
            self.IsAdminLabel.configure(font=font9)
            self.IsAdminLabel.configure(foreground="#130c0e")
            self.IsAdminLabel.configure(text='''管理员权限''')

            self.IsAdminEntry = tk.Entry(top)
            self.IsAdminEntry.place(relx=0.664, rely=0.679, height=24
                    , relwidth=0.249)
            self.IsAdminEntry.configure(background="#fffffb")
            self.IsAdminEntry.configure(font=font9)
            self.IsAdminEntry.configure(foreground="#130c0e")
            self.IsAdminEntry.configure(insertbackground="#130c0e")
            self.IsAdminEntry.configure(selectbackground="#d3d7d4")
            self.IsAdminEntry.configure(selectforeground="#130c0e")
            self.IsAdminEntry.configure(textvariable=Main_GUI_support.IS_ADMIN)
            self.IsAdminEntry.bind("<Key-Return>", Main_GUI_support.new)
        else:
            self.DetailNotebook = ttk.Notebook(top)
            self.DetailNotebook.place(relx=0.28, rely=0.101, relheight=0.809
                    , relwidth=0.704)
            self.DetailNotebook.configure(width=300)
            self.DetailNotebook_t0 = tk.Frame(self.DetailNotebook)
            self.DetailNotebook.add(self.DetailNotebook_t0, padding=0)
            self.DetailNotebook.tab(0, text="统计信息/主诉", compound="none", underline="-1",)
            self.DetailNotebook_t0.configure(background="#fffffb")
            self.DetailNotebook_t0.configure(highlightbackground="#d9d9d9")
            self.DetailNotebook_t0.configure(highlightcolor="black")
            self.DetailNotebook_t1 = tk.Frame(self.DetailNotebook)
            self.DetailNotebook.add(self.DetailNotebook_t1, padding=0)
            self.DetailNotebook.tab(1, text="病史",compound="none",underline="-1",)
            self.DetailNotebook_t1.configure(background="#fffffb")
            self.DetailNotebook_t1.configure(highlightbackground="#d9d9d9")
            self.DetailNotebook_t1.configure(highlightcolor="black")
            self.DetailNotebook_t2 = tk.Frame(self.DetailNotebook)
            self.DetailNotebook.add(self.DetailNotebook_t2, padding=0)
            self.DetailNotebook.tab(2, text="体格检查",compound="none",underline="-1",)
            self.DetailNotebook_t2.configure(background="#fffffb")
            self.DetailNotebook_t2.configure(highlightbackground="#d9d9d9")
            self.DetailNotebook_t2.configure(highlightcolor="black")
            self.DetailNotebook_t3 = tk.Frame(self.DetailNotebook)
            self.DetailNotebook.add(self.DetailNotebook_t3, padding=0)
            self.DetailNotebook.tab(3, text="诊断",compound="none",underline="-1",)
            self.DetailNotebook_t3.configure(background="#fffffb")
            self.DetailNotebook_t3.configure(highlightbackground="#d9d9d9")
            self.DetailNotebook_t3.configure(highlightcolor="black")
            self.DetailNotebook_t4 = tk.Frame(self.DetailNotebook)
            self.DetailNotebook.add(self.DetailNotebook_t4, padding=0)
            self.DetailNotebook.tab(4, text="医嘱",compound="none",underline="-1",)
            self.DetailNotebook_t4.configure(background="#fffffb")
            self.DetailNotebook_t4.configure(highlightbackground="#d9d9d9")
            self.DetailNotebook_t4.configure(highlightcolor="black")

            self.NameLabel = tk.Label(self.DetailNotebook_t0)
            self.NameLabel.place(relx=0.011, rely=0.019, height=24, width=76)
            self.NameLabel.configure(background="#fffffb")
            self.NameLabel.configure(font=font9)
            self.NameLabel.configure(foreground="#130c0e")
            self.NameLabel.configure(text='''姓名''')

            self.SexLabel = tk.Label(self.DetailNotebook_t0)
            self.SexLabel.place(relx=0.344, rely=0.019, height=24, width=76)
            self.SexLabel.configure(background="#fffffb")
            self.SexLabel.configure(font=font9)
            self.SexLabel.configure(foreground="#130c0e")
            self.SexLabel.configure(text='''性别''')

            self.AgeLabel = tk.Label(self.DetailNotebook_t0)
            self.AgeLabel.place(relx=0.667, rely=0.019, height=24, width=76)
            self.AgeLabel.configure(background="#fffffb")
            self.AgeLabel.configure(font=font9)
            self.AgeLabel.configure(foreground="#130c0e")
            self.AgeLabel.configure(text='''年龄''')

            self.PlaceLabel = tk.Label(self.DetailNotebook_t0)
            self.PlaceLabel.place(relx=0.011, rely=0.075, height=24, width=76)
            self.PlaceLabel.configure(background="#fffffb")
            self.PlaceLabel.configure(font=font9)
            self.PlaceLabel.configure(foreground="#130c0e")
            self.PlaceLabel.configure(text='''籍贯''')

            self.MaritalStLabel = tk.Label(self.DetailNotebook_t0)
            self.MaritalStLabel.place(relx=0.344, rely=0.075, height=24, width=76)
            self.MaritalStLabel.configure(background="#fffffb")
            self.MaritalStLabel.configure(font=font9)
            self.MaritalStLabel.configure(foreground="#130c0e")
            self.MaritalStLabel.configure(text='''婚姻''')

            self.NationLabel = tk.Label(self.DetailNotebook_t0)
            self.NationLabel.place(relx=0.667, rely=0.075, height=24, width=76)
            self.NationLabel.configure(background="#fffffb")
            self.NationLabel.configure(font=font9)
            self.NationLabel.configure(foreground="#130c0e")
            self.NationLabel.configure(text='''民族''')

            self.OccupationLabel = tk.Label(self.DetailNotebook_t0)
            self.OccupationLabel.place(relx=0.011, rely=0.131, height=24, width=76)
            self.OccupationLabel.configure(background="#fffffb")
            self.OccupationLabel.configure(font=font9)
            self.OccupationLabel.configure(foreground="#130c0e")
            self.OccupationLabel.configure(text='''职业''')

            self.AddressLabel = tk.Label(self.DetailNotebook_t0)
            self.AddressLabel.place(relx=0.344, rely=0.131, height=24, width=76)
            self.AddressLabel.configure(background="#fffffb")
            self.AddressLabel.configure(font=font9)
            self.AddressLabel.configure(foreground="#130c0e")
            self.AddressLabel.configure(text='''住址''')

            self.AdmissionLabel = tk.Label(self.DetailNotebook_t0)
            self.AdmissionLabel.place(relx=0.011, rely=0.187, height=24, width=76)
            self.AdmissionLabel.configure(background="#fffffb")
            self.AdmissionLabel.configure(font=font9)
            self.AdmissionLabel.configure(foreground="#130c0e")
            self.AdmissionLabel.configure(text='''入院日期''')

            self.RecordLabel = tk.Label(self.DetailNotebook_t0)
            self.RecordLabel.place(relx=0.011, rely=0.243, height=24, width=76)
            self.RecordLabel.configure(background="#fffffb")
            self.RecordLabel.configure(font=font9)
            self.RecordLabel.configure(foreground="#130c0e")
            self.RecordLabel.configure(text='''记录日期''')

            self.HistoryLabel = tk.Label(self.DetailNotebook_t0)
            self.HistoryLabel.place(relx=0.333, rely=0.187, height=24, width=96)
            self.HistoryLabel.configure(background="#fffffb")
            self.HistoryLabel.configure(font=font9)
            self.HistoryLabel.configure(foreground="#130c0e")
            self.HistoryLabel.configure(text='''病史采集日期''')

            self.RecorderLabel = tk.Label(self.DetailNotebook_t0)
            self.RecorderLabel.place(relx=0.344, rely=0.243, height=24, width=76)
            self.RecorderLabel.configure(background="#fffffb")
            self.RecorderLabel.configure(font=font9)
            self.RecorderLabel.configure(foreground="#130c0e")
            self.RecorderLabel.configure(text='''记录者''')

            self.EMRIdLabel = tk.Label(self.DetailNotebook_t0)
            self.EMRIdLabel.place(relx=0.667, rely=0.243, height=24, width=76)
            self.EMRIdLabel.configure(background="#fffffb")
            self.EMRIdLabel.configure(font=font9)
            self.EMRIdLabel.configure(foreground="#130c0e")
            self.EMRIdLabel.configure(text='''病历号''')

            self.SourceLabel = tk.Label(self.DetailNotebook_t0)
            self.SourceLabel.place(relx=0.667, rely=0.187, height=24, width=76)
            self.SourceLabel.configure(background="#fffffb")
            self.SourceLabel.configure(font=font9)
            self.SourceLabel.configure(foreground="#130c0e")
            self.SourceLabel.configure(text='''病史陈述者''')

            self.CCLabel = tk.Label(self.DetailNotebook_t0)
            self.CCLabel.place(relx=0.011, rely=0.355, height=24, width=76)
            self.CCLabel.configure(background="#fffffb")
            self.CCLabel.configure(font=font9)
            self.CCLabel.configure(foreground="#130c0e")
            self.CCLabel.configure(text='''主诉''')

            self.NameEntry = tk.Entry(self.DetailNotebook_t0)
            self.NameEntry.place(relx=0.111, rely=0.019,height=24, relwidth=0.204)
            self.NameEntry.configure(background="#fffffb")
            self.NameEntry.configure(font=font9)
            self.NameEntry.configure(foreground="#130c0e")
            self.NameEntry.configure(insertbackground="#130c0e")
            self.NameEntry.configure(selectbackground="#d3d7d4")
            self.NameEntry.configure(selectforeground="#130c0e")
            self.NameEntry.configure(textvariable=Main_GUI_support.NAME)

            self.PlaceEntry = tk.Entry(self.DetailNotebook_t0)
            self.PlaceEntry.place(relx=0.111, rely=0.075,height=24, relwidth=0.204)
            self.PlaceEntry.configure(background="#fffffb")
            self.PlaceEntry.configure(font=font9)
            self.PlaceEntry.configure(foreground="#130c0e")
            self.PlaceEntry.configure(insertbackground="#130c0e")
            self.PlaceEntry.configure(selectbackground="#d3d7d4")
            self.PlaceEntry.configure(selectforeground="#130c0e")
            self.PlaceEntry.configure(textvariable=Main_GUI_support.PLACE)

            self.OccupationEntry = tk.Entry(self.DetailNotebook_t0)
            self.OccupationEntry.place(relx=0.111, rely=0.131, height=24
                    , relwidth=0.204)
            self.OccupationEntry.configure(background="#fffffb")
            self.OccupationEntry.configure(font=font9)
            self.OccupationEntry.configure(foreground="#130c0e")
            self.OccupationEntry.configure(insertbackground="#130c0e")
            self.OccupationEntry.configure(selectbackground="#d3d7d4")
            self.OccupationEntry.configure(selectforeground="#130c0e")
            self.OccupationEntry.configure(textvariable=Main_GUI_support.OCCUPATION)

            self.AdmissionEntry = tk.Entry(self.DetailNotebook_t0)
            self.AdmissionEntry.place(relx=0.111, rely=0.187, height=24
                    , relwidth=0.204)
            self.AdmissionEntry.configure(background="#fffffb")
            self.AdmissionEntry.configure(font=font9)
            self.AdmissionEntry.configure(foreground="#130c0e")
            self.AdmissionEntry.configure(insertbackground="#130c0e")
            self.AdmissionEntry.configure(selectbackground="#d3d7d4")
            self.AdmissionEntry.configure(selectforeground="#130c0e")
            self.AdmissionEntry.configure(textvariable=Main_GUI_support.ADMISSION)

            self.RecordEntry = tk.Entry(self.DetailNotebook_t0)
            self.RecordEntry.place(relx=0.111, rely=0.243, height=24, relwidth=0.204)
            self.RecordEntry.configure(disabledforeground="#d3d7d4")
            self.RecordEntry.configure(disabledbackground="#77787b")
            self.RecordEntry.configure(background="#fffffb")
            self.RecordEntry.configure(font=font9)
            self.RecordEntry.configure(foreground="#130c0e")
            self.RecordEntry.configure(insertbackground="#130c0e")
            self.RecordEntry.configure(selectbackground="#d3d7d4")
            self.RecordEntry.configure(selectforeground="#130c0e")
            self.RecordEntry.configure(textvariable=Main_GUI_support.RECORD)
            self.RecordEntry.config(state="disabled")

            self.SexEntry = tk.Entry(self.DetailNotebook_t0)
            self.SexEntry.place(relx=0.444, rely=0.019,height=24, relwidth=0.204)
            self.SexEntry.configure(background="#fffffb")
            self.SexEntry.configure(font=font9)
            self.SexEntry.configure(foreground="#130c0e")
            self.SexEntry.configure(insertbackground="#130c0e")
            self.SexEntry.configure(selectbackground="#d3d7d4")
            self.SexEntry.configure(selectforeground="#130c0e")
            self.SexEntry.configure(textvariable=Main_GUI_support.SEX)

            self.MaritalStEntry = tk.Entry(self.DetailNotebook_t0)
            self.MaritalStEntry.place(relx=0.444, rely=0.075, height=24
                    , relwidth=0.204)
            self.MaritalStEntry.configure(background="#fffffb")
            self.MaritalStEntry.configure(font=font9)
            self.MaritalStEntry.configure(foreground="#130c0e")
            self.MaritalStEntry.configure(insertbackground="#130c0e")
            self.MaritalStEntry.configure(selectbackground="#d3d7d4")
            self.MaritalStEntry.configure(selectforeground="#130c0e")
            self.MaritalStEntry.configure(textvariable=Main_GUI_support.MARITAL_ST)

            self.HistoryEntry = tk.Entry(self.DetailNotebook_t0)
            self.HistoryEntry.place(relx=0.444, rely=0.187, height=24
                    , relwidth=0.204)
            self.HistoryEntry.configure(background="#fffffb")
            self.HistoryEntry.configure(font=font9)
            self.HistoryEntry.configure(foreground="#130c0e")
            self.HistoryEntry.configure(insertbackground="#130c0e")
            self.HistoryEntry.configure(selectbackground="#d3d7d4")
            self.HistoryEntry.configure(selectforeground="#130c0e")
            self.HistoryEntry.configure(textvariable=Main_GUI_support.HISTORY)

            self.RecorderEntry = tk.Entry(self.DetailNotebook_t0)
            self.RecorderEntry.place(relx=0.444, rely=0.243, height=24
                    , relwidth=0.204)
            self.RecorderEntry.configure(disabledforeground="#d3d7d4")
            self.RecorderEntry.configure(disabledbackground="#77787b")
            self.RecorderEntry.configure(background="#fffffb")
            self.RecorderEntry.configure(font=font9)
            self.RecorderEntry.configure(foreground="#130c0e")
            self.RecorderEntry.configure(insertbackground="#130c0e")
            self.RecorderEntry.configure(selectbackground="#d3d7d4")
            self.RecorderEntry.configure(selectforeground="#130c0e")
            self.RecorderEntry.configure(textvariable=Main_GUI_support.RECORDER)
            self.RecorderEntry.config(state="disabled")

            self.EMRIdEntry = tk.Entry(self.DetailNotebook_t0)
            self.EMRIdEntry.place(relx=0.767, rely=0.243, height=24
                    , relwidth=0.204)
            self.EMRIdEntry.configure(disabledforeground="#d3d7d4")
            self.EMRIdEntry.configure(disabledbackground="#77787b")
            self.EMRIdEntry.configure(background="#fffffb")
            self.EMRIdEntry.configure(font=font9)
            self.EMRIdEntry.configure(foreground="#130c0e")
            self.EMRIdEntry.configure(insertbackground="#130c0e")
            self.EMRIdEntry.configure(selectbackground="#d3d7d4")
            self.EMRIdEntry.configure(selectforeground="#130c0e")
            self.EMRIdEntry.configure(textvariable=Main_GUI_support.EMRID)

            self.AgeEntry = tk.Entry(self.DetailNotebook_t0)
            self.AgeEntry.place(relx=0.767, rely=0.019,height=24, relwidth=0.204)
            self.AgeEntry.configure(background="#fffffb")
            self.AgeEntry.configure(font=font9)
            self.AgeEntry.configure(foreground="#130c0e")
            self.AgeEntry.configure(insertbackground="#130c0e")
            self.AgeEntry.configure(selectbackground="#d3d7d4")
            self.AgeEntry.configure(selectforeground="#130c0e")
            self.AgeEntry.configure(textvariable=Main_GUI_support.AGE)

            self.NationEntry = tk.Entry(self.DetailNotebook_t0)
            self.NationEntry.place(relx=0.767, rely=0.075, height=24, relwidth=0.204)

            self.NationEntry.configure(background="#fffffb")
            self.NationEntry.configure(font=font9)
            self.NationEntry.configure(foreground="#130c0e")
            self.NationEntry.configure(insertbackground="#130c0e")
            self.NationEntry.configure(selectbackground="#d3d7d4")
            self.NationEntry.configure(selectforeground="#130c0e")
            self.NationEntry.configure(textvariable=Main_GUI_support.NATION)

            self.SourceEntry = tk.Entry(self.DetailNotebook_t0)
            self.SourceEntry.place(relx=0.767, rely=0.187, height=24, relwidth=0.204)

            self.SourceEntry.configure(background="#fffffb")
            self.SourceEntry.configure(font=font9)
            self.SourceEntry.configure(foreground="#130c0e")
            self.SourceEntry.configure(insertbackground="#130c0e")
            self.SourceEntry.configure(selectbackground="#d3d7d4")
            self.SourceEntry.configure(selectforeground="#130c0e")
            self.SourceEntry.configure(textvariable=Main_GUI_support.SOURCE)

            self.AddressEntry = tk.Entry(self.DetailNotebook_t0)
            self.AddressEntry.place(relx=0.444, rely=0.131, height=24
                    , relwidth=0.527)
            self.AddressEntry.configure(background="#fffffb")
            self.AddressEntry.configure(font=font9)
            self.AddressEntry.configure(foreground="#130c0e")
            self.AddressEntry.configure(insertbackground="#130c0e")
            self.AddressEntry.configure(selectbackground="#d3d7d4")
            self.AddressEntry.configure(selectforeground="#130c0e")
            self.AddressEntry.configure(textvariable=Main_GUI_support.ADDRESS)

            self.CCText = ScrolledText(self.DetailNotebook_t0)
            self.CCText.place(relx=0.111, rely=0.355, relheight=0.594
                    , relwidth=0.856)
            self.CCText.configure(background="#fffffb")
            self.CCText.configure(font=font9)
            self.CCText.configure(foreground="#130c0e")
            self.CCText.configure(insertbackground="#130c0e")
            self.CCText.configure(insertborderwidth="3")
            self.CCText.configure(selectbackground="#d3d7d4")
            self.CCText.configure(selectforeground="#130c0e")
            self.CCText.configure(wrap='none')

            self.HPILabel = tk.Label(self.DetailNotebook_t1)
            self.HPILabel.place(relx=0.011, rely=0.019, height=24, width=76)
            self.HPILabel.configure(background="#fffffb")
            self.HPILabel.configure(font=font9)
            self.HPILabel.configure(foreground="#130c0e")
            self.HPILabel.configure(text='''现病史''')

            self.PMHLabel = tk.Label(self.DetailNotebook_t1)
            self.PMHLabel.place(relx=0.011, rely=0.206, height=24, width=76)
            self.PMHLabel.configure(background="#fffffb")
            self.PMHLabel.configure(font=font9)
            self.PMHLabel.configure(foreground="#130c0e")
            self.PMHLabel.configure(text='''既往史''')

            self.PHLabel = tk.Label(self.DetailNotebook_t1)
            self.PHLabel.place(relx=0.011, rely=0.393, height=24, width=76)
            self.PHLabel.configure(background="#fffffb")
            self.PHLabel.configure(font=font9)
            self.PHLabel.configure(foreground="#130c0e")
            self.PHLabel.configure(text='''个人史''')

            self.OGHLabel = tk.Label(self.DetailNotebook_t1)
            self.OGHLabel.place(relx=0.011, rely=0.579, height=24, width=106)
            self.OGHLabel.configure(background="#fffffb")
            self.OGHLabel.configure(font=font9)
            self.OGHLabel.configure(foreground="#130c0e")
            self.OGHLabel.configure(text='''月经婚育史''')

            self.FHLabel = tk.Label(self.DetailNotebook_t1)
            self.FHLabel.place(relx=0.011, rely=0.766, height=24, width=76)
            self.FHLabel.configure(background="#fffffb")
            self.FHLabel.configure(font=font9)
            self.FHLabel.configure(foreground="#130c0e")
            self.FHLabel.configure(text='''家族史''')

            self.HPIText = ScrolledText(self.DetailNotebook_t1)
            self.HPIText.place(relx=0.144, rely=0.019, relheight=0.164
                    , relwidth=0.811)
            self.HPIText.configure(background="#fffffb")
            self.HPIText.configure(font=font9)
            self.HPIText.configure(foreground="#130c0e")
            self.HPIText.configure(insertbackground="#130c0e")
            self.HPIText.configure(insertborderwidth="3")
            self.HPIText.configure(selectbackground="#d3d7d4")
            self.HPIText.configure(selectforeground="#130c0e")
            self.HPIText.configure(wrap='none')

            self.PMHText = ScrolledText(self.DetailNotebook_t1)
            self.PMHText.place(relx=0.144, rely=0.206, relheight=0.164
                    , relwidth=0.811)
            self.PMHText.configure(background="#fffffb")
            self.PMHText.configure(font=font9)
            self.PMHText.configure(foreground="#130c0e")
            self.PMHText.configure(insertbackground="#130c0e")
            self.PMHText.configure(insertborderwidth="3")
            self.PMHText.configure(selectbackground="#d3d7d4")
            self.PMHText.configure(selectforeground="#130c0e")
            self.PMHText.configure(wrap='none')

            self.PHText = ScrolledText(self.DetailNotebook_t1)
            self.PHText.place(relx=0.144, rely=0.393, relheight=0.164
                    , relwidth=0.811)
            self.PHText.configure(background="#fffffb")
            self.PHText.configure(font=font9)
            self.PHText.configure(foreground="#130c0e")
            self.PHText.configure(insertbackground="#130c0e")
            self.PHText.configure(insertborderwidth="3")
            self.PHText.configure(selectbackground="#d3d7d4")
            self.PHText.configure(selectforeground="#130c0e")
            self.PHText.configure(wrap='none')

            self.OGHText = ScrolledText(self.DetailNotebook_t1)
            self.OGHText.place(relx=0.144, rely=0.579, relheight=0.164
                    , relwidth=0.811)
            self.OGHText.configure(background="#fffffb")
            self.OGHText.configure(font=font9)
            self.OGHText.configure(foreground="#130c0e")
            self.OGHText.configure(insertbackground="#130c0e")
            self.OGHText.configure(insertborderwidth="3")
            self.OGHText.configure(selectbackground="#d3d7d4")
            self.OGHText.configure(selectforeground="#130c0e")
            self.OGHText.configure(wrap='none')

            self.FHText = ScrolledText(self.DetailNotebook_t1)
            self.FHText.place(relx=0.144, rely=0.766, relheight=0.164
                    , relwidth=0.811)
            self.FHText.configure(background="#fffffb")
            self.FHText.configure(font=font9)
            self.FHText.configure(foreground="#130c0e")
            self.FHText.configure(insertbackground="#130c0e")
            self.FHText.configure(insertborderwidth="3")
            self.FHText.configure(selectbackground="#d3d7d4")
            self.FHText.configure(selectforeground="#130c0e")
            self.FHText.configure(width=10)
            self.FHText.configure(wrap='none')

            self.DscrLabel_t2 = tk.Label(self.DetailNotebook_t2)
            self.DscrLabel_t2.place(relx=0.011, rely=0.019, height=24, width=76)
            self.DscrLabel_t2.configure(background="#fffffb")
            self.DscrLabel_t2.configure(font=font9)
            self.DscrLabel_t2.configure(foreground="#130c0e")
            self.DscrLabel_t2.configure(text='''描述''')

            self.DscrText_t2 = ScrolledText(self.DetailNotebook_t2)
            self.DscrText_t2.place(relx=0.111, rely=0.019, relheight=0.931
                    , relwidth=0.856)
            self.DscrText_t2.configure(background="#fffffb")
            self.DscrText_t2.configure(font=font9)
            self.DscrText_t2.configure(foreground="#130c0e")
            self.DscrText_t2.configure(insertbackground="#130c0e")
            self.DscrText_t2.configure(insertborderwidth="3")
            self.DscrText_t2.configure(selectbackground="#d3d7d4")
            self.DscrText_t2.configure(selectforeground="#130c0e")
            self.DscrText_t2.configure(wrap='none')

            self.DscrLabel_t3 = tk.Label(self.DetailNotebook_t3)
            self.DscrLabel_t3.place(relx=0.011, rely=0.019, height=24, width=76)
            self.DscrLabel_t3.configure(background="#fffffb")
            self.DscrLabel_t3.configure(font=font9)
            self.DscrLabel_t3.configure(foreground="#130c0e")
            self.DscrLabel_t3.configure(text='''描述''')

            self.SignLabel_t3 = tk.Label(self.DetailNotebook_t3)
            self.SignLabel_t3.place(relx=0.656, rely=0.916, height=24, width=76)
            self.SignLabel_t3.configure(background="#fffffb")
            self.SignLabel_t3.configure(font=font9)
            self.SignLabel_t3.configure(foreground="#130c0e")
            self.SignLabel_t3.configure(text='''医师签名''')

            self.DscrText_t3 = ScrolledText(self.DetailNotebook_t3)
            self.DscrText_t3.place(relx=0.111, rely=0.019, relheight=0.856
                    , relwidth=0.856)
            self.DscrText_t3.configure(background="#fffffb")
            self.DscrText_t3.configure(font=font9)
            self.DscrText_t3.configure(foreground="#130c0e")
            self.DscrText_t3.configure(insertbackground="#130c0e")
            self.DscrText_t3.configure(insertborderwidth="3")
            self.DscrText_t3.configure(selectbackground="#d3d7d4")
            self.DscrText_t3.configure(selectforeground="#130c0e")
            self.DscrText_t3.configure(wrap='none')

            self.SignEntry_t3 = tk.Entry(self.DetailNotebook_t3)
            self.SignEntry_t3.place(relx=0.756, rely=0.916, height=24
                    , relwidth=0.204)
            self.SignEntry_t3.configure(background="#fffffb")
            self.SignEntry_t3.configure(font=font9)
            self.SignEntry_t3.configure(foreground="#130c0e")
            self.SignEntry_t3.configure(insertbackground="#130c0e")
            self.SignEntry_t3.configure(selectbackground="#d3d7d4")
            self.SignEntry_t3.configure(selectforeground="#130c0e")
            self.SignEntry_t3.configure(textvariable=Main_GUI_support.SIGN_T3)

            self.DscrLabel_t4 = tk.Label(self.DetailNotebook_t4)
            self.DscrLabel_t4.place(relx=0.011, rely=0.019, height=24, width=76)
            self.DscrLabel_t4.configure(background="#fffffb")
            self.DscrLabel_t4.configure(font=font9)
            self.DscrLabel_t4.configure(foreground="#130c0e")
            self.DscrLabel_t4.configure(text='''描述''')

            self.SignLabel_t4 = tk.Label(self.DetailNotebook_t4)
            self.SignLabel_t4.place(relx=0.656, rely=0.916, height=24, width=76)
            self.SignLabel_t4.configure(background="#fffffb")
            self.SignLabel_t4.configure(font=font9)
            self.SignLabel_t4.configure(foreground="#130c0e")
            self.SignLabel_t4.configure(text='''医师签名''')

            self.DscrText_t4 = ScrolledText(self.DetailNotebook_t4)
            self.DscrText_t4.place(relx=0.111, rely=0.019, relheight=0.856
                    , relwidth=0.856)
            self.DscrText_t4.configure(background="#fffffb")
            self.DscrText_t4.configure(font=font9)
            self.DscrText_t4.configure(foreground="#130c0e")
            self.DscrText_t4.configure(insertbackground="#130c0e")
            self.DscrText_t4.configure(insertborderwidth="3")
            self.DscrText_t4.configure(selectbackground="#d3d7d4")
            self.DscrText_t4.configure(selectforeground="#130c0e")
            self.DscrText_t4.configure(wrap='none')

            self.SignEntry_t4 = tk.Entry(self.DetailNotebook_t4)
            self.SignEntry_t4.place(relx=0.756, rely=0.916, height=24
                    , relwidth=0.204)
            self.SignEntry_t4.configure(background="#fffffb")
            self.SignEntry_t4.configure(font=font9)
            self.SignEntry_t4.configure(foreground="#130c0e")
            self.SignEntry_t4.configure(insertbackground="#130c0e")
            self.SignEntry_t4.configure(selectbackground="#d3d7d4")
            self.SignEntry_t4.configure(selectforeground="#130c0e")
            self.SignEntry_t4.configure(textvariable=Main_GUI_support.SIGN_T4)
            self.DetailNotebook.bind('<Button-1>',_button_press)
            self.DetailNotebook.bind('<ButtonRelease-1>',_button_release)
            self.DetailNotebook.bind('<Motion>',_mouse_over)

    @staticmethod
    def popup1(event, *args, **kwargs):
        Popupmenu1 = tk.Menu(root, tearoff=0)
        Popupmenu1.configure(activebackground="#f9f9f9")
        Popupmenu1.configure(activeborderwidth="1")
        Popupmenu1.configure(activeforeground="black")
        Popupmenu1.configure(background="#d9d9d9")
        Popupmenu1.configure(borderwidth="1")
        Popupmenu1.configure(disabledforeground="#a3a3a3")
        Popupmenu1.configure(font="???? 9")
        Popupmenu1.configure(foreground="black")
        Popupmenu1.post(event.x_root, event.y_root)

# The following code is add to handle mouse events with the close icons
# in PNotebooks widgets.
def _button_press(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        index = widget.index("@%d,%d" % (event.x, event.y))
        widget.state(['pressed'])
        widget._active = index

def _button_release(event):
    widget = event.widget
    if not widget.instate(['pressed']):
            return
    element = widget.identify(event.x, event.y)
    try:
        index = widget.index("@%d,%d" % (event.x, event.y))
    except TclError:
        pass
    if "close" in element and widget._active == index:
        widget.forget(index)
        widget.event_generate("<<NotebookTabClosed>>")

    widget.state(['!pressed'])
    widget._active = None

def _mouse_over(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        widget.state(['alternate'])
    else:
        widget.state(['!alternate'])

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





